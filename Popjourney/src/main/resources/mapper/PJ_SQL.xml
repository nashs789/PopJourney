<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="PJ">
	<select id="login" parameterType="hashmap" resultType="hashmap">
		SELECT MEM_NO, GRADE_NO, NIC, TO_CHAR(LAST_DATE, 'YYYY-MM-DD')AS LAST_DATE, TO_CHAR(SYSDATE, 'YYYY-MM-DD') AS TODAY 
		FROM MEM
		WHERE ID = #{inputID} AND PW = #{inputPW}
	</select>
	
	<select id="IDDbCk" parameterType="hashmap" resultType="hashmap">
		SELECT MEM_NO
		FROM MEM
		WHERE ID = #{storage}
	</select>
	
	<select id="IDDbCk2" parameterType="hashmap" resultType="hashmap">
		SELECT MEM_NO
		FROM MEM
		WHERE ID = #{storage}
		AND MEM_NO != #{MEM_NO}
	</select>
	
	<select id="nicDbCk" parameterType="hashmap" resultType="hashmap">
		SELECT MEM_NO
		FROM MEM
		WHERE NIC = #{storage}
	</select>
	
	<select id="nicDbCk2" parameterType="hashmap" resultType="hashmap">
		SELECT MEM_NO
		FROM MEM
		WHERE NIC = #{storage}
		AND MEM_NO != #{MEM_NO}
	</select>
	
	<insert id="join" parameterType="hashmap"> <!-- 사진경로 넣어야함 -->
		INSERT INTO MEM(MEM_NO, ID, PW, PHONE, EMAIL, EMAIL_CONFIRM, NAME, TELCOM,
         			    NIC, INTRO, BIRTH, SEX, KEYWORD_NO, MARKETING, JOIN_DATE, KEYWORD)
		VALUES(MEM_SEQ.NEXTVAL, #{inputID}, #{inputPW}, #{phone}, #{email}, #{inputCode}, #{inputName},
			   #{selectTelcom} ,#{inputNic}, #{inputIntro}, #{birth}, #{sex}, #{selectKeyword},
			   #{marketing}, SYSDATE, #{inputKeyword})
	</insert>
	
	<select id="findID" parameterType="hashmap" resultType="hashmap">
		SELECT MEM_NO, NAME, ID, SUBSTR(ID, 0, 2)AS FIRST, SUBSTR(ID, LENGTH(ID)-1, 2)AS LAST
		FROM MEM
		WHERE NAME = #{inputName}
		AND EMAIL = #{email}
		AND KEYWORD_NO = #{selectKeyword} 
		AND KEYWORD = #{inputKeyword}
	</select>
	
	<select id="findPW" parameterType="hashmap" resultType="hashmap"> 
		SELECT MEM_NO
		FROM MEM
		WHERE NAME = #{inputName}
		AND ID = #{inputID}
		AND EMAIL = #{email}
		AND KEYWORD_NO = #{selectKeyword} 
		AND KEYWORD = #{inputKeyword}
	</select>
	
	<update id="updatePW" parameterType="hashmap">
		UPDATE MEM SET PW = #{inputPW}
		WHERE MEM_NO = #{MEM_NO}
	</update>
	
	<select id="getInfo" parameterType="hashmap" resultType="hashmap">
		SELECT ID, PW, SUBSTR(PHONE, 4, 11)AS PHONE , SUBSTR(EMAIL, 1, INSTR(EMAIL, '@')-1) AS EMAIL, SUBSTR(EMAIL, INSTR(EMAIL, '@')+1) AS DOMAIN,
        NAME, TO_CHAR(BIRTH, 'YYYY') AS YEAR, SUBSTR(MONTH, 1, INSTR(MONTH, '월')-1) AS MONTH, TO_CHAR(BIRTH, 'DD') AS DAY, SEX, KEYWORD_NO, KEYWORD, TELCOM
		FROM (SELECT M.*, TO_CHAR(BIRTH, 'MON') AS MONTH
        FROM MEM M)
	 	WHERE MEM_NO = #{MEM_NO}
	</select>
	
	<update id="updateInfo" parameterType="hashmap">
		UPDATE MEM SET ID = #{inputID}, PW = #{inputPW}, TELCOM = #{selectTelcom}, PHONE = #{inputPhone},
               KEYWORD_NO = #{selectKeyword}, KEYWORD = #{inputKeyword}
		WHERE MEM_NO = #{MEM_NO}
	</update>
	
	<update id="accCnt" parameterType="hashmap">
		UPDATE MEM SET ACC_CNT = ACC_CNT+1, LAST_DATE = SYSDATE
		WHERE MEM_NO = #{MEM_NO}
	</update>
	
	<select id="getInfo2" parameterType="hashmap" resultType="hashmap">
		SELECT PHOTO_PATH, NIC, INTRO
		FROM MEM
		WHERE MEM_NO = ${MEM_NO}
	</select>
	
	<update id="updateProfile" parameterType="hashmap">
		UPDATE MEM SET PHOTO_PATH = #{photoPath}, NIC = #{inputNic}, INTRO = #{inputIntro}
		WHERE MEM_NO = #{MEM_NO}
	</update>
	
	<select id="yearRank" parameterType="hashmap" resultType="hashmap">
		SELECT J.JOURNAL_NO, J.NIC, J.MEM_NO, J.HIT, TO_CHAR(J.JOURNAL_DATE, 'YYYY-MM-DD')AS JOURNAL_DATE , J.REGION_NAME, CMT, CASE WHEN LENGTH(J.TITLE) > 20 
		                                                                                                                             THEN SUBSTR(J.TITLE, 1, 25) || '....'
		                                                                                                                             ELSE J.TITLE
		                                                                                                                         END AS TITLE
		FROM(SELECT J.JOURNAL_NO, J.TITLE, M.NIC, M.MEM_NO, J.HIT, J.JOURNAL_DATE, RANK() OVER(PARTITION BY JC.SUB_CATEGORY_NO ORDER BY HIT DESC)AS RK, 
		            JC.SUB_CATEGORY_NAME AS REGION_NAME, J.REGION_NO
		     FROM JOURNAL J INNER JOIN JOURNAL_CATEGORY JC
		                            ON JC.CATEGORY_NO = 1
		                            AND J.REGION_NO = JC.SUB_CATEGORY_NO
		                    INNER JOIN MEM M
		                             ON M.MEM_NO = J.MEM_NO
		      WHERE TO_CHAR(J.JOURNAL_DATE, 'YY')= TO_CHAR(SYSDATE, 'YY')) J LEFT OUTER JOIN (SELECT J.JOURNAL_NO, COUNT(*) AS CMT
		                                                                               FROM JOURNAL J INNER JOIN JOURNAL_CMT JC
		                                                                                                      ON J.JOURNAL_NO = JC.JOURNAL_NO
		                                                                               GROUP BY J.JOURNAL_NO) JC
		                                                                           ON J.JOURNAL_NO = JC.JOURNAL_NO
		WHERE J.RK BETWEEN 1 AND 9
		AND J.REGION_NO = #{regionNo} 
		ORDER BY J.HIT DESC 
	</select>
	
	<select id="monthRank" parameterType="hashmap" resultType="hashmap">
		SELECT J.JOURNAL_NO, J.NIC, J.MEM_NO, J.HIT, TO_CHAR(J.JOURNAL_DATE, 'YYYY-MM-DD')AS JOURNAL_DATE , J.REGION_NAME, CASE WHEN J.MONTH >= 10
		                                                                                                                        THEN J.MONTH
		                                                                                                                        ELSE SUBSTR(J.MONTH, 2)
		                                                                                                                     END AS MONTH, CMT, CASE WHEN LENGTH(J.TITLE) > 20 
		                                                                                                                                             THEN SUBSTR(J.TITLE, 1, 25) || '....'
		                                                                                                                                             ELSE J.TITLE
		                                                                                                                                        END AS TITLE
		FROM(SELECT J.JOURNAL_NO, J.TITLE, M.NIC, M.MEM_NO, J.HIT, J.JOURNAL_DATE, RANK() OVER(PARTITION BY JC.SUB_CATEGORY_NO ORDER BY HIT DESC)AS RK, 
		            JC.SUB_CATEGORY_NAME AS REGION_NAME, J.REGION_NO, TO_CHAR(SYSDATE, 'MM') AS MONTH
		     FROM JOURNAL J INNER JOIN JOURNAL_CATEGORY JC
		                            ON JC.CATEGORY_NO = 1
		                            AND J.REGION_NO = JC.SUB_CATEGORY_NO
		                    INNER JOIN MEM M
		                             ON M.MEM_NO = J.MEM_NO
		      WHERE TO_CHAR(J.JOURNAL_DATE, 'YY')= TO_CHAR(SYSDATE, 'YY')
		      AND TO_CHAR(J.JOURNAL_DATE, 'MM')= TO_CHAR(SYSDATE, 'MM')) J LEFT OUTER JOIN (SELECT J.JOURNAL_NO, COUNT(*) AS CMT
		                                                                                    FROM JOURNAL J INNER JOIN JOURNAL_CMT JC
		                                                                                                           ON J.JOURNAL_NO = JC.JOURNAL_NO
		                                                                                    GROUP BY J.JOURNAL_NO) JC
		                                                                                ON J.JOURNAL_NO = JC.JOURNAL_NO
		     WHERE J.RK BETWEEN 1 AND 9
		     AND J.REGION_NO = #{regionNo}
		     ORDER BY J.HIT DESC
	</select>
	
	<select id="weekRank" parameterType="hashmap" resultType="hashmap">
		SELECT J.JOURNAL_NO, J.NIC, J.MEM_NO, J.HIT, TO_CHAR(J.JOURNAL_DATE, 'YYYY-MM-DD')AS JOURNAL_DATE , J.REGION_NAME,  CMT, CASE WHEN LENGTH(J.TITLE) > 20 
		                                                                                                                              THEN SUBSTR(J.TITLE, 1, 25) || '....'
		                                                                                                                              ELSE J.TITLE
		                                                                                                                          END AS TITLE
		FROM(SELECT J.JOURNAL_NO, J.TITLE, M.NIC, M.MEM_NO, J.HIT, J.JOURNAL_DATE, RANK() OVER(PARTITION BY JC.SUB_CATEGORY_NO ORDER BY HIT DESC)AS RK, 
		            JC.SUB_CATEGORY_NAME AS REGION_NAME, J.REGION_NO
		     FROM JOURNAL J INNER JOIN JOURNAL_CATEGORY JC
		                            ON JC.CATEGORY_NO = 1
		                            AND J.REGION_NO = JC.SUB_CATEGORY_NO
		                    INNER JOIN MEM M
		                             ON M.MEM_NO = J.MEM_NO
		      WHERE TO_CHAR(J.JOURNAL_DATE, 'YY')= TO_CHAR(SYSDATE, 'YY')
		      AND TO_CHAR(J.JOURNAL_DATE, 'MM')= TO_CHAR(SYSDATE, 'MM')
		      AND TO_CHAR(J.JOURNAL_DATE, 'IW')= TO_CHAR(SYSDATE, 'IW')) J LEFT OUTER JOIN (SELECT J.JOURNAL_NO, COUNT(*) AS CMT
                                                                    FROM JOURNAL J INNER JOIN JOURNAL_CMT JC
                                                                                           ON J.JOURNAL_NO = JC.JOURNAL_NO
                                                                    GROUP BY J.JOURNAL_NO) JC
                                                                ON J.JOURNAL_NO = JC.JOURNAL_NO
		     WHERE J.RK BETWEEN 1 AND 9
		     AND J.REGION_NO = #{regionNo}
		     ORDER BY J.HIT DESC
	</select>
	
	<select id="getDetail" parameterType="hashmap" resultType="hashmap">
		SELECT JD.PHOTO_PATH, JD.CONTENTS, JL.LIKE_CNT
		FROM JOURNAL_DETAIL JD INNER JOIN (SELECT COUNT(*)AS LIKE_CNT 
		                                   FROM JOURNAL_LIKE
		                                   WHERE JOURNAL_NO = #{journalNo}) JL
		                               ON 1 = 1
		WHERE JD.JOURNAL_NO = #{journalNo} 
		AND JD.JOURNAL_SEQUENCE = 1     
	</select>
	
	<select id="notification" parameterType="hashmap" resultType="hashmap">
		SELECT NOTF_NO, EVENT_NO, TO_CHAR(NOTF_DATE, 'YYYY-MM-DD')AS NOTF_DATE, NOTF_MEM_NO, REQUEST, MEM_NO, TARGET, JTITLE, JCONTENTS, BTITLE, BCONTENTS, DOWN_CONTENTS, UP_CMT_MEM_NO, UP_CONTENTS
		FROM(SELECT NF.NOTF_NO, NF.EVENT_NO, NFE.EVENT_NAME, NF.NOTF_MEM_NO, M.NIC AS REQUEST, NF.MEM_NO, M2.NIC AS TARGET, NF.GBN_NO, NF.NOTF_DATE,  
		     RANK() OVER(PARTITION BY NF.MEM_NO ORDER BY TO_CHAR(NF.NOTF_DATE, 'YYYY-MM-DD HH:MMI:SS')DESC) AS RK, JCMT.TITLE AS JTITLE, JCMT.CONTENTS AS JCONTENTS, BCMT.TITLE AS BTITLE, 
		     BCMT.CONTENTS AS BCONTENTS, JCCMT.DOWN_CONTENTS, JCCMT.UP_CMT_MEM_NO, JCCMT.UP_CONTENTS
		     FROM NOTF NF INNER JOIN MEM M --알람주체
		                          ON NF.NOTF_MEM_NO = M.MEM_NO
		                  INNER JOIN MEM M2 --알람대상
		                          ON NF.MEM_NO = M2.MEM_NO
		                  INNER JOIN NOTF_EVENT NFE
		                          ON NF.EVENT_NO = NFE.EVENT_NO
		                  LEFT OUTER JOIN (SELECT NF.NOTF_NO, JC.CONTENTS, J.TITLE
		                                   FROM NOTF NF INNER JOIN NOTF_EVENT NFE
		                                                        ON NF.EVENT_NO = NFE.EVENT_NO
		                                                        AND NF.EVENT_NO = 1
		                                                INNER JOIN JOURNAL_CMT JC
		                                                        ON NF.GBN_NO = JC.JOURNAL_CMT_NO
		                                                INNER JOIN JOURNAL J
		                                                        ON JC.JOURNAL_NO = J.JOURNAL_NO) JCMT
		                               ON NF.NOTF_NO = JCMT.NOTF_NO 
		                 LEFT OUTER JOIN (SELECT NF.*, NFE.EVENT_NAME, B.TITLE, BC.CONTENTS
		                                  FROM NOTF NF INNER JOIN NOTF_EVENT NFE
		                                                       ON NF.EVENT_NO = NFE.EVENT_NO
		                                                       AND NF.EVENT_NO = 2
		                                               INNER JOIN BOARD_CMT BC
		                                                       ON NF.GBN_NO = BC.POST_CMT_NO
		                                               INNER JOIN BOARD B
		                                                       ON BC.POST_NO = B.POST_NO) BCMT
		                              ON NF.NOTF_NO = BCMT.NOTF_NO
		                 LEFT OUTER JOIN (SELECT NF.NOTF_NO, JC.CONTENTS AS DOWN_CONTENTS, JC2.MEM_NO AS UP_CMT_MEM_NO, JC2.CONTENTS AS UP_CONTENTS
		                                  FROM NOTF NF INNER JOIN NOTF_EVENT NFE
		                                                       ON NF.EVENT_NO = NFE.EVENT_NO
		                                                       AND NF.EVENT_NO = 3
		                                               INNER JOIN JOURNAL_CMT JC --하위댓글
		                                                       ON NF.GBN_NO = JC.JOURNAL_CMT_NO
		                                               INNER JOIN JOURNAL_CMT JC2 --상위댓글
		                                                       ON JC2.JOURNAL_CMT_NO = JC.PARENTS_CMT_NO) JCCMT
		                              ON NF.NOTF_NO = JCCMT.NOTF_NO)
		WHERE MEM_NO = #{MEM_NO}
		AND RK BETWEEN 1 AND 10    
	</select>
</mapper>